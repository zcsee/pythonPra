# -*- coding: utf-8 -*-
"""
 Author : Jason See
 Date   : 2022/7/15 9:54
 Tool   : PyCharm
 Content: 解码方法
 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
 'A' -> "1"
'B' -> "2"
...
'Z' -> "26"

"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数
"""


class Solution:
    def numDecodings(self, s: str) -> int:
        n = len(s)
        s = ' ' + s
        f = [0] * (n + 1)
        f[0] = 1
        for i in range(1, n + 1):
            # 计算当前位的数值，赋值给a
            a = ord(s[i]) - ord('0')

            # 计算当前位和前一位的组合值，赋值给b
            b = (ord(s[i - 1]) - ord('0')) * 10 + ord(s[i]) - ord('0')

            # 判断当前位是否符合单位条件，符合则将前一个的值赋予
            if 1 <= a <= 9:
                f[i] = f[i - 1]
            # 判断当前位与前一位是否组成合法的编码，符合则加上双位的值
            if 10 <= b <= 26:
                f[i] += f[i - 2]
        return f[n]

    # 滚动数组，空间复杂度为1（数组长度为3）
    def numDecodings2(self, s: str) -> int:
        n = len(s)
        s = ' ' + s
        f = [0] * 3
        f[0] = 1
        for i in range(1, n + 1):
            # 复用上一次的第一位，将值重置为0
            f[i % 3] = 0
            # 计算当前位的数值，赋值给a
            a = ord(s[i]) - ord('0')
            # 计算当前位和前一位的组合值，赋值给b
            b = (ord(s[i - 1]) - ord('0')) * 10 + ord(s[i]) - ord('0')

            # 判断当前位是否符合单位条件，符合则将前一个的值赋予
            if 1 <= a <= 9:
                f[i % 3] = f[(i - 1) % 3]
            # 判断当前位与前一位是否组成合法的编码，符合则加上双位的值
            if 10 <= b <= 26:
                f[i % 3] += f[(i - 2) % 3]
        return f[n % 3]


so = Solution()
res = so.numDecodings2('12')
print(f"{res=}")
